import os
import urllib.parse
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import pygame
from fuzzywuzzy import fuzz, process  # Added import for fuzzy matching
from threading import Thread  # Added import for threading
from natsort import natsorted
import random

MAX_FILENAME_LENGTH = 245  # Maximum length for playlist filenames

class MusicPlayer:
    def __init__(self):
        self.playlist = []
        self.current_index = 0
        self.playlist_folder = ""  # Added attribute to store playlist folder path
        self.paused = False  # Flag to track if music is paused
        self.running = True  # Flag to indicate if the player is running
        self.volume = 0.5  # Initial volume setting (0.0 to 1.0)

    def load_playlist(self, playlist_path):
        try:
            if not os.path.isfile(playlist_path):
                print(f"Error: Playlist file '{playlist_path}' not found.")
                return False

            self.stop()  # Stop current playing
            self.playlist.clear()  # Clear current playlist
            self.current_index = 0  # Reset current index

            with open(playlist_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                for line in lines:
                    line = line.strip()
                    if line.startswith('#EXTM3U') or line.startswith('#EXTINF'):
                        continue  # Skip m3u header and info lines
                    elif line.startswith('# Song:'):
                        continue  # Skip specific comment lines
                    elif line.startswith('file://'):
                        media_path = line.replace('file:///', '')
                        media_path = urllib.parse.unquote(media_path)  # Decode URL encoding
                        if os.path.exists(media_path):
                            self.playlist.append(media_path)
                        else:
                            print(f"Skipping unknown or inaccessible file: {media_path}")
                    else:
                        print(f"Skipping unrecognized entry in playlist: {line}")

            if self.playlist:
                print(f"Playlist '{os.path.basename(playlist_path)}' loaded successfully.")
                self.play()
                return True
            else:
                print(f"No valid media files found in playlist '{os.path.basename(playlist_path)}'.")
                return False

        except Exception as e:
            print(f"Error occurred while loading playlist '{playlist_path}': {e}")
            return False

    def play(self):
        if not self.playlist:
            print("Playlist is empty. Load a playlist first.")
            return

        if self.paused:
            pygame.mixer.music.unpause()
            self.paused = False
            print(f"Resumed playing: {os.path.basename(self.playlist[self.current_index])}")
        else:
            pygame.mixer.music.load(self.playlist[self.current_index])
            pygame.mixer.music.set_volume(self.volume)  # Set initial volume
            pygame.mixer.music.play()
            print(f"Now playing: {os.path.basename(self.playlist[self.current_index])}")

    def pause(self):
        if pygame.mixer.music.get_busy():
            pygame.mixer.music.pause()
            self.paused = True
            print("Music paused.")

    def stop(self):
        pygame.mixer.music.stop()
        self.paused = False
        print("Music stopped.")

    def next_track(self):
        if not self.playlist:
            print("Playlist is empty. Load a playlist first.")
            return

        self.current_index = (self.current_index + 1) % len(self.playlist)
        self.play()
        return self.playlist[self.current_index]

    def previous_track(self):
        if not self.playlist:
            print("Playlist is empty. Load a playlist first.")
            return

        self.current_index = (self.current_index - 1) % len(self.playlist)
        self.play()
        return self.playlist[self.current_index]

    def track_finished_event(self):
        while self.running:
            if pygame.mixer.music.get_busy() == 0 and not self.paused:
                self.next_track()
            pygame.time.wait(1000)  # Wait for 1 second between checks

    def quit(self):
        self.running = False

    def set_volume(self, volume):
        self.volume = volume
        if pygame.mixer.music.get_busy():
            pygame.mixer.music.set_volume(self.volume)
            print(f"Volume set to: {self.volume:.1f}")

    def get_volume(self):
        return self.volume

    def raise_volume(self):
        if self.volume + 0.1 <= 1.0:
            self.volume += 0.1
        else:
            self.volume = 1.0
        self.set_volume(self.volume)

    def lower_volume(self):
        if self.volume - 0.1 >= 0.0:
            self.volume -= 0.1
        else:
            self.volume = 0.0
        self.set_volume(self.volume)

    def create_artist_playlists_from_folder(self, music_source_dir, playlist_dest_dir):
        try:
            if not os.path.exists(music_source_dir) or not os.path.isdir(music_source_dir):
                messagebox.showerror("Error", f"Music source directory '{music_source_dir}' not found.")
                return False

            if not os.path.exists(playlist_dest_dir):
                os.makedirs(playlist_dest_dir)

            for root, dirs, files in os.walk(music_source_dir):
                songs = [file for file in files if file.lower().endswith(('.aif', '.aiff', '.ifo', '.mp4', '.mkv')) and not file.startswith('._')]
                if songs:
                    artist_name = os.path.basename(os.path.dirname(root))

                    songs = natsorted(songs)

                    playlist_title = f'{artist_name}'
                    playlist_name = self.sanitize_playlist_name(playlist_title)
                    playlist_name = playlist_name[:MAX_FILENAME_LENGTH - len('.m3u')]

                    song_playlist_path = os.path.join(playlist_dest_dir, f'{playlist_name}.m3u')
                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                        for song in songs:
                            title = os.path.splitext(song)[0]
                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, song)))
                            song_playlist_file.write(f'# Song: {title}\n')
                            song_playlist_file.write(f'file:///{encoded_path}\n')

            messagebox.showinfo("Success", f"Artist playlists created successfully in '{playlist_dest_dir}'.")
            return True

        except Exception as e:
            messagebox.showerror("Error", f"Error occurred while creating artist playlists: {e}")
            return False

    def create_album_playlists_from_folder(self, music_source_dir, playlist_dest_dir):
        try:
            if not os.path.exists(music_source_dir) or not os.path.isdir(music_source_dir):
                messagebox.showerror("Error", f"Music source directory '{music_source_dir}' not found.")
                return False

            if not os.path.exists(playlist_dest_dir):
                os.makedirs(playlist_dest_dir)

            for root, dirs, files in os.walk(music_source_dir):
                songs = [file for file in files if file.lower().endswith(('.aif', '.aiff', '.ifo', '.mp4', '.mkv')) and not file.startswith('._')]
                if songs:
                    artist_name = os.path.basename(os.path.dirname(root))
                    album_name = os.path.basename(root)

                    songs = natsorted(songs)

                    playlist_title = f'{album_name} {artist_name}'
                    playlist_name = self.sanitize_playlist_name(playlist_title)
                    playlist_name = playlist_name[:MAX_FILENAME_LENGTH - len('.m3u')]

                    song_playlist_path = os.path.join(playlist_dest_dir, f'{playlist_name}.m3u')
                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                        for song in songs:
                            title = os.path.splitext(song)[0]
                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, song)))
                            song_playlist_file.write(f'# Song: {title}\n')
                            song_playlist_file.write(f'file:///{encoded_path}\n')

            messagebox.showinfo("Success", f"Album playlists created successfully in '{playlist_dest_dir}'.")
            return True

        except Exception as e:
            messagebox.showerror("Error", f"Error occurred while creating album playlists: {e}")
            return False

    def create_song_playlists_from_folder(self, music_source_dir, playlist_dest_dir):
        try:
            if not os.path.exists(music_source_dir) or not os.path.isdir(music_source_dir):
                messagebox.showerror("Error", f"Music source directory '{music_source_dir}' not found.")
                return False

            if not os.path.exists(playlist_dest_dir):
                os.makedirs(playlist_dest_dir)

            for root, dirs, files in os.walk(music_source_dir):
                songs = [file for file in files if file.lower().endswith(('.aif', '.aiff', '.ifo', '.mp4', '.mkv')) and not file.startswith('._')]
                if songs:
                    songs = natsorted(songs)

                    for song in songs:
                        title = os.path.splitext(song)[0]
                        song_playlist_path = os.path.join(playlist_dest_dir, f'{self.sanitize_playlist_name(title)}.m3u')
                        with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, song)))
                            song_playlist_file.write(f'# Song: {title}\n')
                            song_playlist_file.write(f'file:///{encoded_path}\n')

            messagebox.showinfo("Success", f"Song playlists created successfully in '{playlist_dest_dir}'.")
            return True

        except Exception as e:
            messagebox.showerror("Error", f"Error occurred while creating song playlists: {e}")
            return False

    def sanitize_playlist_name(self, playlist_title):
        invalid_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*']
        for char in invalid_chars:
            playlist_title = playlist_title.replace(char, '')
        return playlist_title

    def write_to_history_playlist(self, playlist_folder, playlist_title):
        try:
            history_path = os.path.join(playlist_folder, "history.m3u")
            if not os.path.exists(history_path):
                with open(history_path, 'w', encoding='utf-8') as history_file:
                    history_file.write("#EXTM3U\n")

            playlist_name = self.sanitize_playlist_name(playlist_title)

            # Check if playlist entry already exists in history
            with open(history_path, 'r', encoding='utf-8') as history_file:
                for line in history_file:
                    if line.strip() == f'# Playlist: {playlist_title}':
                        print(f"Playlist '{playlist_title}' already exists in history. Skipping write.")
                        return

            # If playlist not found in history, write the entry
            with open(history_path, 'a', encoding='utf-8') as history_file:
                history_file.write(f'# Playlist: {playlist_title}\n')
            print(f"Added playlist '{playlist_title}' to history.")
        except Exception as e:
            print(f"Error occurred while writing to history playlist: {e}")

    def play_random_song_from_history(self, playlist_folder):
        try:
            history_path = os.path.join(playlist_folder, "history.m3u")
            if not os.path.exists(history_path):
                print("History playlist 'history.m3u' not found.")
                return False

            with open(history_path, 'r', encoding='utf-8') as history_file:
                lines = history_file.readlines()
                filtered_lines = [line.strip() for line in lines if line.strip().startswith('# Playlist:')]
                if not filtered_lines:
                    print("No playlists found in history.")
                    return False

                random_playlist_line = random.choice(filtered_lines)
                random_playlist_title = random_playlist_line.replace('# Playlist: ', '', 1)

                playlist_name = self.sanitize_playlist_name(random_playlist_title)
                playlist_path = os.path.join(playlist_folder, f"{playlist_name}.m3u")

                if os.path.exists(playlist_path):
                    if self.load_playlist(playlist_path):
                        print(f"Random song loaded from playlist '{playlist_name}' successfully.")
                        return True
                    else:
                        print(f"Failed to load random song from playlist '{playlist_name}'.")
                        return False
                else:
                    print(f"Playlist '{playlist_name}' not found.")
                    return False

        except Exception as e:
            print(f"Error occurred while playing random song from history playlist: {e}")
            return False

class MusicPlayerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Music Player")
        self.root.geometry("800x600")

        self.player = MusicPlayer()

        self.create_menu()

        self.label_playlist_folder = tk.Label(self.root, text="Playlist Folder:")
        self.label_playlist_folder.pack()

        self.playlist_folder_entry = tk.Entry(self.root, width=50)
        self.playlist_folder_entry.pack()

        self.btn_browse_playlist_folder = tk.Button(self.root, text="Browse", command=self.browse_playlist_folder)
        self.btn_browse_playlist_folder.pack()

        self.label_playlist_name = tk.Label(self.root, text="Playlist Name:")
        self.label_playlist_name.pack()

        self.entry_playlist_name = tk.Entry(self.root, width=50)
        self.entry_playlist_name.pack()

        self.btn_load_playlist = tk.Button(self.root, text="Load Playlist", command=self.load_playlist_enter)
        self.btn_load_playlist.pack()

        self.btn_play_random_song = tk.Button(self.root, text="Play Random Song from History", command=self.play_random_song_from_history)
        self.btn_play_random_song.pack()

        self.text_widget = scrolledtext.ScrolledText(self.root, width=70, height=20)
        self.text_widget.pack()

        # Play button
        self.btn_play = tk.Button(self.root, text="Play", command=self.player.play)
        self.btn_play.pack()

        # Pause button
        self.btn_pause = tk.Button(self.root, text="Pause", command=self.player.pause)
        self.btn_pause.pack()

        # Next track button
        self.btn_next = tk.Button(self.root, text="Next Track", command=self.player.next_track)
        self.btn_next.pack()

        # Previous track button
        self.btn_prev = tk.Button(self.root, text="Previous Track", command=self.player.previous_track)
        self.btn_prev.pack()

        # Volume slider
        self.volume_label = tk.Label(self.root, text="Volume:")
        self.volume_label.pack()

        self.volume_slider = ttk.Scale(self.root, from_=0.0, to=1.0, orient=tk.HORIZONTAL, length=200, command=self.set_volume_slider)
        self.volume_slider.set(self.player.get_volume())
        self.volume_slider.pack()

        # Command entry
        self.label_command = tk.Label(self.root, text="Enter Command:")
        self.label_command.pack()

        self.entry_command = tk.Entry(self.root, width=50)
        self.entry_command.pack()

        self.btn_execute_command = tk.Button(self.root, text="Execute Command", command=self.execute_command)
        self.btn_execute_command.pack()

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def create_menu(self):
        menubar = tk.Menu(self.root)
        filemenu = tk.Menu(menubar, tearoff=0)
        filemenu.add_command(label="Create Artist Playlists", command=self.create_artist_playlists)
        filemenu.add_command(label="Create Album Playlists", command=self.create_album_playlists)
        filemenu.add_command(label="Create Song Playlists", command=self.create_song_playlists)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=self.on_close)
        menubar.add_cascade(label="File", menu=filemenu)
        self.root.config(menu=menubar)

    def browse_playlist_folder(self):
        folder_path = filedialog.askdirectory()
        if folder_path:
            self.player.playlist_folder = folder_path
            self.playlist_folder_entry.delete(0, tk.END)
            self.playlist_folder_entry.insert(0, folder_path)
            print(f"Selected playlist folder: {folder_path}")

    def load_playlist_enter(self, event=None):
        playlist_name_input = self.entry_playlist_name.get().strip()
        if not playlist_name_input:
            messagebox.showwarning("Warning", "Please enter a playlist name.")
            return

        if not self.player.playlist_folder:
            messagebox.showerror("Error", "Playlist folder not selected.")
            return

        playlists_in_folder = [f.replace(".m3u", "") for f in os.listdir(self.player.playlist_folder) if f.endswith(".m3u")]
        match = process.extractOne(playlist_name_input, playlists_in_folder, scorer=fuzz.ratio)

        if match and match[1] >= 80:  # Adjust the threshold as needed
            playlist_name = match[0]
            playlist_path = os.path.join(self.player.playlist_folder, f"{playlist_name}.m3u")

            if os.path.exists(playlist_path):
                if self.player.load_playlist(playlist_path):
                    messagebox.showinfo("Success", f"Playlist '{playlist_name}' loaded successfully.")
                    self.text_widget.insert("end", f"Playlist loaded: {playlist_path}\n")
                    self.player.write_to_history_playlist(self.player.playlist_folder, playlist_name)
                else:
                    messagebox.showerror("Error", f"Failed to load playlist '{playlist_name}'.")
            else:
                messagebox.showerror("Error", f"Playlist '{playlist_name}' not found.")
        else:
            messagebox.showerror("Error", "No matching playlist found.")

        self.entry_playlist_name.delete(0, 'end')

    def play_random_song_from_history(self):
        if not self.player.playlist_folder:
            messagebox.showerror("Error", "Playlist folder not selected.")
            return

        if self.player.play_random_song_from_history(self.player.playlist_folder):
            self.text_widget.insert("end", "Random song from history playlist played.\n")

    def set_volume_slider(self, volume):
        self.player.set_volume(float(volume))

    def execute_command(self):
        command = self.entry_command.get().strip().lower()
        if command == "raise volume":
            self.player.raise_volume()
            self.volume_slider.set(self.player.get_volume())
            print("Volume raised by 10%.")
        elif command == "lower volume":
            self.player.lower_volume()
            self.volume_slider.set(self.player.get_volume())
            print("Volume lowered by 10%.")
        else:
            print("Unknown command. Please enter 'raise volume' or 'lower volume'.")

    def create_artist_playlists(self):
        music_source_dir = filedialog.askdirectory(title="Select Music Source Directory")
        if music_source_dir:
            playlist_dest_dir = filedialog.askdirectory(title="Select Playlist Destination Directory")
            if playlist_dest_dir:
                self.player.create_artist_playlists_from_folder(music_source_dir, playlist_dest_dir)

    def create_album_playlists(self):
        music_source_dir = filedialog.askdirectory(title="Select Music Source Directory")
        if music_source_dir:
            playlist_dest_dir = filedialog.askdirectory(title="Select Playlist Destination Directory")
            if playlist_dest_dir:
                self.player.create_album_playlists_from_folder(music_source_dir, playlist_dest_dir)

    def create_song_playlists(self):
        music_source_dir = filedialog.askdirectory(title="Select Music Source Directory")
        if music_source_dir:
            playlist_dest_dir = filedialog.askdirectory(title="Select Playlist Destination Directory")
            if playlist_dest_dir:
                self.player.create_song_playlists_from_folder(music_source_dir, playlist_dest_dir)

    def on_close(self):
        self.player.quit()
        self.root.destroy()

def main():
    pygame.mixer.init()

    root = tk.Tk()
    app = MusicPlayerGUI(root)
    root.mainloop()

    pygame.mixer.quit()

if __name__ == "__main__":
    main()
