import os
import hashlib
from collections import defaultdict
import tkinter as tk
from tkinter import filedialog

def get_file_hash(filename, block_size=65536):
    sha1 = hashlib.sha1()
    with open(filename, 'rb') as f:
        while True:
            data = f.read(block_size)
            if not data:
                break
            sha1.update(data)
    return sha1.hexdigest()

def find_and_remove_duplicates(source_dir, target_dir, file_extension):
    source_file_size_dict = defaultdict(list)

    # Build a dictionary of source file sizes and corresponding paths
    for foldername, subfolders, filenames in os.walk(source_dir):
        for filename in filenames:
            if filename.endswith(file_extension):
                file_path = os.path.join(foldername, filename)
                file_size = os.path.getsize(file_path)
                source_file_size_dict[(filename, file_size)].append(file_path)

    # Iterate through the target directory and check for duplicates
    for foldername, subfolders, filenames in os.walk(target_dir):
        for filename in filenames:
            if filename.endswith(file_extension):
                file_path = os.path.join(foldername, filename)
                file_size = os.path.getsize(file_path)
                source_paths = source_file_size_dict.get((filename, file_size), [])

                # If there are duplicates in the source directory, remove the file from the target directory
                if len(source_paths) > 0:
                    print(f"Duplicate file found in target directory '{file_path}'; removing...")
                    os.remove(file_path)

def select_source_folder():
    source_dir = filedialog.askdirectory()
    source_entry.delete(0, tk.END)
    source_entry.insert(0, source_dir)

def select_target_folder():
    target_dir = filedialog.askdirectory()
    target_entry.delete(0, tk.END)
    target_entry.insert(0, target_dir)

def start_processing():
    source_directory = source_entry.get()
    target_directory = target_entry.get()
    file_extension = ".aiff"
    
    find_and_remove_duplicates(source_directory, target_directory, file_extension)

# Create the Tkinter window
root = tk.Tk()
root.title("Duplicate File Remover")

# Create and place widgets
source_label = tk.Label(root, text="Source Folder:")
source_label.grid(row=0, column=0, padx=10, pady=5, sticky=tk.E)

source_entry = tk.Entry(root, width=50)
source_entry.grid(row=0, column=1, padx=10, pady=5)

source_button = tk.Button(root, text="Browse", command=select_source_folder)
source_button.grid(row=0, column=2, padx=10, pady=5)

target_label = tk.Label(root, text="Target Folder:")
target_label.grid(row=1, column=0, padx=10, pady=5, sticky=tk.E)

target_entry = tk.Entry(root, width=50)
target_entry.grid(row=1, column=1, padx=10, pady=5)

target_button = tk.Button(root, text="Browse", command=select_target_folder)
target_button.grid(row=1, column=2, padx=10, pady=5)

start_button = tk.Button(root, text="Start Processing", command=start_processing)
start_button.grid(row=2, column=1, padx=10, pady=10)

# Run the Tkinter event loop
root.mainloop()
