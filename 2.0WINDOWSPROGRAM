import os
import urllib.parse
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from natsort import natsorted
import pygame
from fuzzywuzzy import fuzz, process  # Added import for fuzzy matching

MAX_FILENAME_LENGTH = 245  # Maximum length for playlist filenames

class MusicPlayer:
    def __init__(self):
        self.playlist = []
        self.current_index = 0
        self.playlist_folder = ""  # Added attribute to store playlist folder path
        self.paused = False  # Flag to track if music is paused

    def load_playlist(self, playlist_path):
        try:
            if not os.path.isfile(playlist_path):
                print(f"Error: Playlist file '{playlist_path}' not found.")
                return False

            self.stop()  # Stop current playing
            self.playlist.clear()  # Clear current playlist
            self.current_index = 0  # Reset current index

            with open(playlist_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                for line in lines:
                    line = line.strip()
                    if line.startswith('#EXTM3U') or line.startswith('#EXTINF'):
                        continue  # Skip m3u header and info lines
                    elif line.startswith('# Song:'):
                        continue  # Skip specific comment lines
                    elif line.startswith('file://'):
                        media_path = line.replace('file:///', '')
                        media_path = urllib.parse.unquote(media_path)  # Decode URL encoding
                        if os.path.exists(media_path):
                            self.playlist.append(media_path)
                        else:
                            print(f"Skipping unknown or inaccessible file: {media_path}")
                    else:
                        print(f"Skipping unrecognized entry in playlist: {line}")

            if self.playlist:
                print(f"Playlist '{os.path.basename(playlist_path)}' loaded successfully.")
                self.play()
                return True
            else:
                print(f"No valid media files found in playlist '{os.path.basename(playlist_path)}'.")
                return False

        except Exception as e:
            print(f"Error occurred while loading playlist '{playlist_path}': {e}")
            return False

    def play(self):
        if not self.playlist:
            print("Playlist is empty. Load a playlist first.")
            return

        pygame.mixer.music.load(self.playlist[self.current_index])
        pygame.mixer.music.play()
        print(f"Now playing: {os.path.basename(self.playlist[self.current_index])}")

    def stop(self):
        pygame.mixer.music.stop()

    def create_artist_playlists_from_folder(self, music_source_dir, playlist_dest_dir):
        try:
            if not os.path.exists(music_source_dir) or not os.path.isdir(music_source_dir):
                print(f"Error: Music source directory '{music_source_dir}' not found.")
                return False

            if not os.path.exists(playlist_dest_dir):
                os.makedirs(playlist_dest_dir)

            for root, dirs, files in os.walk(music_source_dir):
                songs = [file for file in files if file.lower().endswith(('.aif', '.aiff')) and not file.startswith('._')]
                if songs:
                    artist_name = os.path.basename(os.path.dirname(root))

                    songs = natsorted(songs)

                    playlist_title = f'{artist_name}'
                    playlist_name = self.sanitize_playlist_name(playlist_title)
                    playlist_name = playlist_name[:MAX_FILENAME_LENGTH - len('.m3u')]

                    song_playlist_path = os.path.join(playlist_dest_dir, f'{playlist_name}.m3u')
                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                        for song in songs:
                            title = os.path.splitext(song)[0]
                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, song)))
                            song_playlist_file.write(f'# Song: {title}\n')
                            song_playlist_file.write(f'file:///{encoded_path}\n')
                            self.create_individual_song_playlist(title, os.path.abspath(os.path.join(root, song)), playlist_dest_dir)
                    print(f"Written artist playlist to {playlist_name}.m3u")

            return True

        except Exception as e:
            print(f"Error occurred while creating artist playlists: {e}")
            return False

    def create_album_playlists_from_folder(self, music_source_dir, playlist_dest_dir):
        try:
            if not os.path.exists(music_source_dir) or not os.path.isdir(music_source_dir):
                print(f"Error: Music source directory '{music_source_dir}' not found.")
                return False

            if not os.path.exists(playlist_dest_dir):
                os.makedirs(playlist_dest_dir)

            for root, dirs, files in os.walk(music_source_dir):
                songs = [file for file in files if file.lower().endswith(('.aif', '.aiff')) and not file.startswith('._')]
                if songs:
                    artist_name = os.path.basename(os.path.dirname(root))
                    album_name = os.path.basename(root)

                    songs = natsorted(songs)

                    playlist_title = f'{album_name} {artist_name}'
                    playlist_name = self.sanitize_playlist_name(playlist_title)
                    playlist_name = playlist_name[:MAX_FILENAME_LENGTH - len('.m3u')]

                    song_playlist_path = os.path.join(playlist_dest_dir, f'{playlist_name}.m3u')
                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                        for song in songs:
                            title = os.path.splitext(song)[0]
                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, song)))
                            song_playlist_file.write(f'# Song: {title}\n')
                            song_playlist_file.write(f'file:///{encoded_path}\n')
                            self.create_individual_song_playlist(title, os.path.abspath(os.path.join(root, song)), playlist_dest_dir)
                    print(f"Written album playlist to {playlist_name}.m3u")

            return True

        except Exception as e:
            print(f"Error occurred while creating album playlists: {e}")
            return False

    def create_song_playlists_from_folder(self, music_source_dir, playlist_dest_dir):
        try:
            if not os.path.exists(music_source_dir) or not os.path.isdir(music_source_dir):
                print(f"Error: Music source directory '{music_source_dir}' not found.")
                return False

            if not os.path.exists(playlist_dest_dir):
                os.makedirs(playlist_dest_dir)

            for root, dirs, files in os.walk(music_source_dir):
                songs = [file for file in files if file.lower().endswith(('.aif', '.aiff')) and not file.startswith('._')]
                if songs:
                    songs = natsorted(songs)

                    for song in songs:
                        title = os.path.splitext(song)[0]
                        song_playlist_path = os.path.join(playlist_dest_dir, f'{self.sanitize_playlist_name(title)}.m3u')
                        with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, song)))
                            song_playlist_file.write(f'# Song: {title}\n')
                            song_playlist_file.write(f'file:///{encoded_path}\n')

            return True

        except Exception as e:
            print(f"Error occurred while creating song playlists: {e}")
            return False

    def play(self):
        if not self.playlist:
            print("Playlist is empty. Load a playlist first.")
            return

        if self.paused:
            pygame.mixer.music.unpause()
            self.paused = False
            print(f"Resumed playing: {os.path.basename(self.playlist[self.current_index])}")
        else:
            pygame.mixer.music.load(self.playlist[self.current_index])
            pygame.mixer.music.play()
            print(f"Now playing: {os.path.basename(self.playlist[self.current_index])}")

    def pause(self):
        if pygame.mixer.music.get_busy():
            pygame.mixer.music.pause()
            self.paused = True
            print("Music paused.")

    def stop(self):
        pygame.mixer.music.stop()
        self.paused = False
        print("Music stopped.")

    def next_track(self):
        if not self.playlist:
            print("Playlist is empty. Load a playlist first.")
            return

        self.current_index = (self.current_index + 1) % len(self.playlist)
        self.play()

    def previous_track(self):
        if not self.playlist:
            print("Playlist is empty. Load a playlist first.")
            return

        self.current_index = (self.current_index - 1) % len(self.playlist)
        self.play()

    def handle_enter_key(self, event):
        command = self.entry_command.get().strip().lower()
        
        if command == "play":
            self.player.play()
            self.text_widget.insert(tk.END, "Resumed playing.\n")
        elif command == "pause":
            self.player.pause()
            self.text_widget.insert(tk.END, "Music paused.\n")
        elif command == "next":
            next_song = self.player.next_track()
            if next_song:
                self.text_widget.insert(tk.END, f"Skipped to next track: {os.path.basename(next_song)}\n")
                self.player.play()  # Start playing the next track
            else:
                self.text_widget.insert(tk.END, "Failed to skip to next track. Playlist may be empty.\n")
        elif command == "previous":
            previous_song = self.player.previous_track()
            if previous_song:
                self.text_widget.insert(tk.END, f"Returned to previous track: {os.path.basename(previous_song)}\n")
                self.player.play()  # Start playing the previous track
            else:
                self.text_widget.insert(tk.END, "Failed to return to previous track. Playlist may be empty.\n")
        else:
            playlist_file = self.find_playlist_by_name(command)
            if playlist_file:
                success = self.player.load_playlist(playlist_file)
                if success:
                    self.text_widget.insert(tk.END, f"Loaded playlist: {os.path.basename(playlist_file)}\n")
                    self.update_playlist_text()
            else:
                self.text_widget.insert(tk.END, f"No playlist found for '{command}'. Try another name or 'play', 'pause', 'next', or 'previous'.\n")
        
        self.entry_command.delete(0, tk.END)


    def create_individual_song_playlist(self, song_title, song_path, playlist_dest_dir):
        try:
            playlist_name = self.sanitize_playlist_name(song_title)
            playlist_name = playlist_name[:MAX_FILENAME_LENGTH - len('.m3u')]
            song_playlist_path = os.path.join(playlist_dest_dir, f'{playlist_name}.m3u')

            with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                title = os.path.splitext(os.path.basename(song_path))[0]
                encoded_path = urllib.parse.quote(song_path)
                song_playlist_file.write(f'# Song: {title}\n')
                song_playlist_file.write(f'file:///{encoded_path}\n')

            print(f"Written individual song playlist to {playlist_name}.m3u")

            return True

        except Exception as e:
            print(f"Error occurred while creating individual song playlist: {e}")
            return False

    def sanitize_playlist_name(self, name):
        return name.replace("'", '').lower()

class MusicPlayerGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Music Player")
        self.geometry("600x400")

        self.player = MusicPlayer()

        self.label_playlist_name = tk.Label(self, text="Playlist Name:")
        self.label_playlist_name.pack(pady=10)

        self.entry_playlist_name = tk.Entry(self, width=50)
        self.entry_playlist_name.pack(pady=5)
        self.entry_playlist_name.bind("<Return>", self.load_playlist_enter)  # Bind Enter key event

        self.select_playlist_folder_button = tk.Button(self, text="Select Playlist Folder", command=self.select_playlist_folder)
        self.select_playlist_folder_button.pack(pady=5)

        self.load_playlist_button = tk.Button(self, text="Load Playlist", command=self.load_playlist)
        self.load_playlist_button.pack(pady=10)

        self.label_create_playlist = tk.Label(self, text="Create Playlist:")
        self.label_create_playlist.pack(pady=10)

        self.create_artist_playlist_button = tk.Button(self, text="Create Artist Playlists from Folder", command=self.create_artist_playlists)
        self.create_artist_playlist_button.pack(pady=5)

        self.create_album_playlist_button = tk.Button(self, text="Create Album Playlists from Folder", command=self.create_album_playlists)
        self.create_album_playlist_button.pack(pady=5)

        self.create_song_playlist_button = tk.Button(self, text="Create Song Playlists from Folder", command=self.create_song_playlists)
        self.create_song_playlist_button.pack(pady=5)

        self.create_all_playlists_button = tk.Button(self, text="Create All Playlists", command=self.create_all_playlists)
        self.create_all_playlists_button.pack(pady=5)

        self.entry_command = tk.Entry(self, width=30)
        self.entry_command.pack(pady=5)
        self.entry_command.bind("<Return>", self.handle_enter_key)

        self.play_button = tk.Button(self, text="Play", command=self.player.play)
        self.play_button.pack(pady=5)

        self.pause_button = tk.Button(self, text="Pause", command=self.player.pause)
        self.pause_button.pack(pady=5)

        self.stop_button = tk.Button(self, text="Stop", command=self.player.stop)
        self.stop_button.pack(pady=5)

        self.next_button = tk.Button(self, text="Next Track", command=self.player.next_track)
        self.next_button.pack(pady=5)

        self.previous_button = tk.Button(self, text="Previous Track", command=self.player.previous_track)
        self.previous_button.pack(pady=5)

        self.text_log = scrolledtext.ScrolledText(self, width=60, height=10, wrap=tk.WORD)
        self.text_log.pack(pady=10)

        self.text_widget = scrolledtext.ScrolledText(self, wrap="word", width=60, height=10)
        self.text_widget.pack(pady=20)

    def load_playlist_enter(self, event=None):
        playlist_name_input = self.entry_playlist_name.get().strip()
        if not playlist_name_input:
            messagebox.showwarning("Warning", "Please enter a playlist name.")
            return

        if not self.player.playlist_folder:
            messagebox.showerror("Error", "Playlist folder not selected.")
            return

        playlists_in_folder = [f.replace(".m3u", "") for f in os.listdir(self.player.playlist_folder) if f.endswith(".m3u")]
        match = process.extractOne(playlist_name_input, playlists_in_folder, scorer=fuzz.ratio)

        if match and match[1] >= 80:  # Adjust the threshold as needed
            playlist_name = match[0]
            playlist_path = os.path.join(self.player.playlist_folder, f"{playlist_name}.m3u")

            if os.path.exists(playlist_path):
                if self.player.load_playlist(playlist_path):
                    messagebox.showinfo("Success", f"Playlist '{playlist_name}' loaded successfully.")
                    self.text_widget.insert("end", f"Playlist loaded: {playlist_path}\n")
                else:
                    messagebox.showerror("Error", f"Failed to load playlist '{playlist_name}'.")
            else:
                messagebox.showerror("Error", f"Playlist '{playlist_name}' not found.")
        else:
            messagebox.showerror("Error", "No matching playlist found.")

        self.entry_playlist_name.delete(0, 'end')

    def handle_enter_key(self, event):
        command = self.entry_command.get().strip().lower()

        if command == "next":
            next_song = self.player.next_track()
            if next_song:
                self.text_widget.insert(tk.END, f"Skipped to next track: {os.path.basename(next_song)}\n")
                self.player.play()
            else:
                self.text_widget.insert(tk.END, "Failed to skip to next track. Playlist may be empty.\n")

        elif command == "previous":
            previous_song = self.player.previous_track()
            if previous_song:
                self.text_widget.insert(tk.END, f"Returned to previous track: {os.path.basename(previous_song)}\n")
                self.player.play()
            else:
                self.text_widget.insert(tk.END, "Failed to return to previous track. Playlist may be empty.\n")

        elif command == "play":
            self.player.play()

        elif command == "pause":
            self.player.pause()

        else:
            playlist_file = self.player.find_playlist_by_name(command)
            if playlist_file:
                success = self.player.load_playlist(playlist_file)
                if success:
                    self.text_widget.insert(tk.END, f"Loaded playlist: {os.path.basename(playlist_file)}\n")
                    self.update_playlist_text()
            else:
                self.text_widget.insert(tk.END, f"No playlist found for '{command}'. Try another name or 'next'.\n")

        self.entry_command.delete(0, tk.END)

    def select_playlist_folder(self):
        folder_selected = filedialog.askdirectory()
        if folder_selected:
            self.player.playlist_folder = folder_selected
            self.text_widget.insert(tk.END, f"Playlist folder selected: {folder_selected}\n")

    def load_playlist(self):
        playlist_path = filedialog.askopenfilename(initialdir=self.player.playlist_folder, title="Select Playlist File",
                                                   filetypes=(("Playlist files", "*.m3u"), ("All files", "*.*")))
        if playlist_path:
            if self.player.load_playlist(playlist_path):
                self.text_widget.insert(tk.END, f"Playlist loaded: {playlist_path}\n")
            else:
                messagebox.showerror("Error", f"Failed to load playlist: {playlist_path}")

    def create_artist_playlists(self):
        music_source_dir = filedialog.askdirectory(
            title="Select Music Source Folder",
            mustexist=True,
            parent=self,
        )
        playlist_dest_dir = filedialog.askdirectory(
            title="Select Playlist Destination Folder",
            mustexist=True,
            parent=self,
        )

        if music_source_dir and playlist_dest_dir:
            if self.player.create_artist_playlists_from_folder(music_source_dir, playlist_dest_dir):
                messagebox.showinfo("Success", "Artist playlists created successfully.")
            else:
                messagebox.showerror("Error", "Failed to create artist playlists.")

    def create_album_playlists(self):
        music_source_dir = filedialog.askdirectory(
            title="Select Music Source Folder",
            mustexist=True,
            parent=self,
        )
        playlist_dest_dir = filedialog.askdirectory(
            title="Select Playlist Destination Folder",
            mustexist=True,
            parent=self,
        )

        if music_source_dir and playlist_dest_dir:
            if self.player.create_album_playlists_from_folder(music_source_dir, playlist_dest_dir):
                messagebox.showinfo("Success", "Album playlists created successfully.")
            else:
                messagebox.showerror("Error", "Failed to create album playlists.")

    def create_song_playlists(self):
        music_source_dir = filedialog.askdirectory(
            title="Select Music Source Folder",
            mustexist=True,
            parent=self,
        )
        playlist_dest_dir = filedialog.askdirectory(
            title="Select Playlist Destination Folder",
            mustexist=True,
            parent=self,
        )

        if music_source_dir and playlist_dest_dir:
            if self.player.create_song_playlists_from_folder(music_source_dir, playlist_dest_dir):
                messagebox.showinfo("Success", "Song playlists created successfully.")
            else:
                messagebox.showerror("Error", "Failed to create song playlists.")

    def create_all_playlists(self):
        music_source_dir = filedialog.askdirectory(
            title="Select Music Source Folder",
            mustexist=True,
            parent=self,
        )
        playlist_dest_dir = filedialog.askdirectory(
            title="Select Playlist Destination Folder",
            mustexist=True,
            parent=self,
        )

        if music_source_dir and playlist_dest_dir:
            success_artist = self.player.create_artist_playlists_from_folder(music_source_dir, playlist_dest_dir)
            success_album = self.player.create_album_playlists_from_folder(music_source_dir, playlist_dest_dir)
            success_song = self.player.create_song_playlists_from_folder(music_source_dir, playlist_dest_dir)

            if success_artist and success_album and success_song:
                messagebox.showinfo("Success", "All playlists created successfully.")
            else:
                messagebox.showerror("Error", "Failed to create all playlists.")
    
if __name__ == "__main__":
    pygame.init()
    app = MusicPlayerGUI()
    app.mainloop()
