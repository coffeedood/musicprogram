import os
import subprocess
import dbus
import time
import readline
import re
import random
import shutil
import readline
from urllib.parse import unquote

def clear_bash_history():
    os.system("sudo history >> history888.m3u")


def save_bash_history_to_m3u():
    # Path to the history file
    bash_history_path = os.path.join(os.path.expanduser("~"), ".bash_history")

    # Read the Bash history
    with open(bash_history_path, "r") as bash_history_file:
        history_lines = bash_history_file.readlines()

    # Path to the history.m3u file
    history_m3u_path = os.path.join(os.path.expanduser("~"), "history.m3u")
    # Write the Bash history to history.m3u
    with open(history_m3u_path, "w") as history_m3u_file:
        history_m3u_file.writelines(history_lines)

#cat /dev/null > ~/.bash_history
#history -c
#truncate -s 0 history.m3u
#truncate -s 0 history999.m3u

def create_custom_playlist():
    playlist_name = input("Enter the custom playlist name: ")
    playlist_path = os.path.join(os.path.expanduser("~"), f"{playlist_name}.m3u")

    with open(playlist_path, "w") as playlist_file:
        while True:
            song_title = input("Enter a song title to add to the playlist (type '0' to stop): ")
            if song_title == "0":
                break
            playlist_file.write(f"{song_title}.m3u\n")

def vlc_play():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Play"])

def vlc_pause():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Pause"])

def vlc_next():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Next"])

def vlc_previous():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Previous"])

def vlc_enqueue_playlist(playlist_path):
    if not playlist_path.endswith('.m3u'):
        playlist_path += '.m3u'
    formatted_path = f"{playlist_path}"
    subprocess.run(["vlc", "--playlist-enqueue", formatted_path])

def vlc_enqueue_song(song_title):
    formatted_title = f"{song_title}.m3u"
    subprocess.run(["vlc", "--playlist-enqueue", formatted_title])

def change_volume(volume):
    if volume < 1 or volume > 10:
        print("Invalid input. Please enter a number between 1 and 10.")
        return

    volume_percent = volume * 10
    command = f"amixer -D pulse sset Master {volume_percent}%"
    subprocess.run(command, shell=True)

def change_volume(volume):
    if volume < 1 or volume > 10:
        print("Invalid input. Please enter a number between 1 and 10.")
        return

    volume_percent = volume * 10
    command = f"amixer -D pulse sset Master {volume_percent}%"
    subprocess.run(command, shell=True)
# Create an empty list to track the executed commands
executed_commands = []

import subprocess


def get_current_volume():
    # Get the current volume level using amixer command
    command = "amixer -D pulse sget Master | grep 'Front Left:' | awk -F'[][]' '{ print $2 }'"
    output = subprocess.check_output(command, shell=True, text=True)
    volume_str = output.strip().replace('%', '')  # Remove the percentage sign
    return int(volume_str)

def change_volume2():
    current_volume = get_current_volume()
    new_volume = current_volume + 10

    if new_volume > 100:
        new_volume = 100

    command = f"amixer -D pulse sset Master {new_volume}%"
    subprocess.run(command, shell=True)


def change_volume3():
    current_volume = get_current_volume()
    new_volume = current_volume - 10

    if new_volume > 100:
        new_volume = 100

    command = f"amixer -D pulse sset Master {new_volume}%"
    subprocess.run(command, shell=True)



def skip_tracks(num_tracks):
    bus = dbus.SessionBus()
    player_obj = bus.get_object('org.mpris.MediaPlayer2.vlc', '/org/mpris/MediaPlayer2')
    player_interface = dbus.Interface(player_obj, 'org.mpris.MediaPlayer2.Player')

    if num_tracks > 0:
        for _ in range(num_tracks):
            vlc_previous()
            time.sleep(0.1)
    else:
        for _ in range(-num_tracks):
            vlc_next()
            time.sleep(0.1)

# Create an empty list to track the executed commands
executed_commands = []

def execute_command(command):
    os.system(command)
    executed_commands.append(command)


# (existing code)

def save_command_history_to_playlist(playlist_name):
    # Get the user's home directory
    home_dir = os.path.expanduser("~")
    history_file_path = os.path.join(home_dir, "history.m3u")

    # Read the entire history from the history file
    with open(history_file_path, "r") as history_file:
        history_lines = history_file.readlines()

    # Ask the user for the number of lines to include in the playlist
    num_lines = int(input("Enter the number of lines from the history to include in the playlist: "))
    if num_lines <= 0:
        print("Invalid number of lines. Playlist not created.")
        return

    # Create the M3U playlist with the given playlist_name
    playlist_path = os.path.join(home_dir, f"{playlist_name}.m3u")
    with open(playlist_path, "w") as playlist_file:
        line_number = 1
        for line in history_lines[-num_lines:]:
            if "open" in line and ".m3u" in line:
                # Remove all the information before the single quotes and delete the single quotes
                command = line.split("'")[1]
                playlist_file.write(f"# Command: {line_number}\n")
                playlist_file.write(f"{command}\n")
                line_number += 1

    print(f"{line_number - 1} command(s) from history have been saved to {playlist_path}.")

def select_open_commands(input_file, output_file):
    with open(input_file, "r") as f_in:
        lines = f_in.readlines()

    with open(output_file + ".m3u", "w") as f_out:
        for line in reversed(lines):
            # Keep only the lines that contain the text "open" and end with ".m3u'"
            if "open '" in line and line.strip().endswith(".m3u'"):
                # Use regex to remove numbers at the beginning of the line and "open " and one space
                line_without_numbers = re.sub(r"^\d+\s*open\s+", "", line.strip())
                # Remove single quote marks from the line
                line_without_quotes = line_without_numbers.replace("'", "")
                # Write the modified line to the output file
                f_out.write(line_without_quotes + "\n")

def select_random_song_from_history(playlist_path):
    # Get the user's home directory
    home_dir = os.path.expanduser("~")
    history_file_path = os.path.join(home_dir, "history.m3u")

    # Read the entire history from the history file
    with open(history_file_path, "r") as history_file:
        playlist_lines = history_file.readlines()

    # Remove any lines that start with '#'
    playlist_lines = [line for line in playlist_lines if not line.startswith("#")]

    # Select a random song from the playlist
    if playlist_lines:
        random_song = random.choice(playlist_lines).strip()
        return random_song
    else:
        print("The playlist is empty.")
        return None
    
def load_history_to_m3u(history_file_path):
    # Run the bash command "history >> history.m3u"
    command = f"history >> {history_file_path}"
    subprocess.run(command, shell=True)

def select_random_song_from_history2(playlist_path):
    with open(playlist_path, "r") as playlist_file:
        playlist_lines = playlist_file.readlines()

    # Remove any lines that start with '#'
    playlist_lines = [line for line in playlist_lines if not line.startswith("#")]

    # Select a random song from the playlist
    if playlist_lines:
        random_song = random.choice(playlist_lines).strip()
        return random_song
    else:
        print("The playlist is empty.")
        return None

def extract_info_from_m3u(file_path):
    with open(file_path, "r") as m3u_file:
        content = m3u_file.read()

    # Use regular expressions to find the artist and album information
    artist_match = re.search(r"# Artist: (.+)", content)
    album_match = re.search(r"# Album: (.+)", content)

    artist = artist_match.group(1) if artist_match else None
    album = album_match.group(1) if album_match else None

    return artist, album

def game_question():
    folder_path = "/home/riley"  # Replace with the correct folder path

    # Get a list of all .m3u files in the folder
    m3u_files = [file for file in os.listdir(folder_path) if file.endswith('.m3u') and len(file) <= 28]

    total_questions = 0
    correct_answers = 0
    incorrect_answers = 0
    opted_out_questions = 0

    while True:
        # Select a random .m3u file
        file = random.choice(m3u_files)
        file_path = os.path.join(folder_path, file)
        artist, album = extract_info_from_m3u(file_path)

        print(f"File: {file}")
        print(f"Artist: {artist}")
        print(f"Album: ")
        print()
        if artist == "Music":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "- 2":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "New Folder (6)":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder 2":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder 3":
            print("Error parsing the song information. Skipping this question.\n")
        elif artist == "Unknown Artist":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Unknown Album":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Compilations":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Media":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "share":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "mom and dad stuff":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif album == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Music":
            print("Error parsing the song information. Skipping this question.\n")
            continue

        user_answer = input("Your answer for the album (or enter ' to opt out, or '0' to exit): ")
        if user_answer == '0':
            break

        total_questions += 1

        if user_answer == "'":
            opted_out_questions += 1
            print("Question opted out.\n")
        elif user_answer.lower() in album.lower():
            print("Correct! You guessed correctly.\n")
            correct_answers += 1
        else:
            print(f"Sorry, the correct answer is '{album}'.\n")
            incorrect_answers += 1

    print("Game Over!")
    print(f"Total Correct Answers: {correct_answers}")
    print(f"Total Incorrect Answers: {incorrect_answers}")
    print(f"Total Opted Out Questions: {opted_out_questions}")

def extract_info_from_m3u2(file_path):
    with open(file_path, "r") as m3u_file:
        content = m3u_file.read()

    # Use regular expressions to find the artist and album information
    artist_match = re.search(r"# Artist: (.+)", content)
    album_match = re.search(r"# Album: (.+)", content)

    artist = artist_match.group(1) if artist_match else None
    album = album_match.group(1) if album_match else None

    return artist, album

def clean_string(s):
    # Remove non-letter and non-number characters
    return re.sub(r'[^a-zA-Z0-9]', '', s)

def game_question2():
    folder_path = "/home/riley"  # Replace with the correct folder path

    # Get a list of all .m3u files in the folder
    m3u_files = [file for file in os.listdir(folder_path) if file.endswith('.m3u') and len(file) <= 28]

    total_questions = 0
    correct_answers = 0
    incorrect_answers = 0
    opted_out_questions = 0

    while True:
        # Select a random .m3u file
        file = random.choice(m3u_files)
        file_path = os.path.join(folder_path, file)
        artist, album = extract_info_from_m3u(file_path)

        print(f"File: {file}")
        print(f"Artist: ")
        print(f"Album: {album}")
        print()
        if album == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "- 2":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "New Folder (6)":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif album == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder 2":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder 3":
            print("Error parsing the song information. Skipping this question.\n")
        elif artist == "Unknown Artist":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Unknown Album":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Compilations":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif album == "Media":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "share":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "mom and dad stuff":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif album == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Music":
            print("Error parsing the song information. Skipping this question.\n")
            continue

        user_answer = input("Your answer for the artist (or enter ' to opt out, or '0' to exit): ")
        if user_answer == '0':
            break

        total_questions += 1

        if user_answer == "'":
            opted_out_questions += 1
            print("Question opted out.\n")
        elif user_answer.lower() in artist.lower():
            print("Correct! You guessed correctly.\n")
            correct_answers += 1
        else:
            print(f"Sorry, the correct answer is '{album}'.\n")
            incorrect_answers += 1

    print("Game Over!")
    print(f"Total Correct Answers: {correct_answers}")
    print(f"Total Incorrect Answers: {incorrect_answers}")
    print(f"Total Opted Out Questions: {opted_out_questions}")

def select_open_commands(input_file, output_file):
    with open(input_file, "r") as f_in:
        lines = f_in.readlines()

    with open(output_file + ".m3u", "w") as f_out:
        for line in lines:
            # Keep only the lines that contain the text "open" and end with ".m3u'"
            if "open '" in line and line.strip().endswith(".m3u'"):
                # Use regex to remove numbers at the beginning of the line and "open " and one space
                line_without_numbers = re.sub(r"^\d+\s*open\s+", "", line.strip())
                # Remove sin34rfgle quote marks from the line
                line_without_quotes = line_without_numbers.replace("'", "")
                line_without = line_without_quotes.replace(".m3u", "")
                # Write the modified line to the output file
                f_out.write(line_without + "\n")

def guessing_game(playlist_info):
    guess_artist = input(f"Guess the Artist of the playlist: ")
    guess_album = input(f"Guess the Album of the playlist: ")
    guess_song = input(f"Guess the Song of the playlist: ")

    return (
        guess_artist.lower() == playlist_info["Artist"].lower() and
        guess_album.lower() == playlist_info["Album"].lower() and
        guess_song.lower() == playlist_info["Song"].lower()
    )

def extract_info_from_playlists(playlist_path):
    playlist_info = {"Song": "", "Album": "", "Artist": ""}
    
    with open(playlist_path, "r") as playlist_file:
        for line in playlist_file:
            line = line.strip()
            if line.startswith("# Song:"):
                playlist_info["Song"] = line.split(": ", 1)[1]
            elif line.startswith("# Album:"):
                playlist_info["Album"] = line.split(": ", 1)[1]
            elif line.startswith("# Artist:"):
                playlist_info["Artist"] = line.split(": ", 1)[1]
    
    return playlist_info


def listening_game():
    playlists_folder = "/home/riley"  # Change to the appropriate folder
    playlist_titles = []

    with open("history3333.m3u", "r") as file:
        for line in file:
            line = line.strip()
            if not line.endswith(".m3u"):
                line += ".m3u"
            playlist_titles.append(line)

    for playlist_title in playlist_titles:
        playlist_path = os.path.join(playlists_folder, playlist_title)
        
        if os.path.exists(playlist_path):
            playlist_info = extract_info_from_playlists(playlist_path)
            os.system(f"vlc -I null --play-and-exit '{playlist_path}'")
            result = guessing_game(playlist_info)
            if result:
                print("Correct!")
            else:
                print(f"Sorry, the correct information is:")
                print(f"Artist: {playlist_info['Artist']}")
                print(f"Album: {playlist_info['Album']}")
                print(f"Song: {playlist_info['Song']}")
        else:
            print(f"Playlist '{playlist_title}' not found.")

def load_history_to_m3u():
    command = input("Enter the bash command to execute: ")
    try:
        subprocess.run(['bash', '-c', command], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error executing the command: {e}")
    else:
        print("Command executed successfully.")

if __name__ == "__main__":
    while True:
        print("1. Play")
        print("2. Pause")
        print("3. Next Track")
        print("4. Previous Track")
        print("5. Skip Tracks")
        print("6. Enqueue Playlist")
        print("7. Create Custom Playlist")
        print("8. Change Volume")
        print("9. Run Command in Terminal")
        print("10. Create History Playlist")
        print("11. Custom History Playlist")
        print("12. Play Random Song From History Playlist (do history >> history.m3u)")
        print("13. Play The Album Game")
        print("14. Play The Artist Game")
        print("0. Exit")
        input_file = "history.m3u"
        output_file = "history3333.m3u"
        select_open_commands(input_file, output_file)

        choice = input("Enter your choice: ")
        
        if choice == "0":
            break
        if "qw" in choice:
        # Execute the command using the custom function to track executed commands
            execute_command(choice)
        # Remove "zx" from the command
            clean_command2 = choice.replace("qw", "")
        # Add "open '" to the beginning and ".m3u' to the end of the cleaned command
            vlc_enqueue_playlist(clean_command2)
        elif "qq" in choice:
            output_file = "history3333.m3u"
            try:
                history_playlist_path = os.path.join(os.path.expanduser("~"), "history3333.m3u")
                random_song = select_random_song_from_history2(history_playlist_path)
                if random_song:
                    print(f"Random song selected: {random_song}")
                        # Run the bash command "open '{random_song}.m3u'"
                    command = f"open '{random_song}.m3u'"
                    subprocess.run(command, shell=True)
            except ValueError:
                print("Invalid input. Please enter a valid number.")
        if "33" in choice:
            output_file = "history3333.m3u"
            try:
                history_playlist_path = os.path.join(os.path.expanduser("~"), "history3333.m3u")
                random_song = select_random_song_from_history2(history_playlist_path)
                if random_song:
                    print(f"Random song selected: {random_song}")
                        # Run the bash command "open '{random_song}.m3u'"
                    command = f"open '{random_song}.m3u'"
                    subprocess.run(command, shell=True)
            except ValueError:
                print("Invalid input. Please enter a valid number.")
        if ".." in choice:
            output_file = "history3333.m3u"
            try:
                history_playlist_path = os.path.join(os.path.expanduser("~"), "history3333.m3u")
                random_song = select_random_song_from_history2(history_playlist_path)
                if random_song:
                    print(f"Random song selected: {random_song}")
                        # Run the bash command "open '{random_song}.m3u'"
                    command = f"open '{random_song}.m3u'"
                    subprocess.run(command, shell=True)
            except ValueError:
                print("Invalid input. Please enter a valid number.")
        existing_entries = set()

        with open("history3333.m3u", "a+") as file:
            existing_entries.update(line.strip() for line in file)

        while True:
            choice = input("Enter your choice (type '0' to exit): ")
            if choice != "s" and choice != "a" and choice != ".." and choice != "33":
                                if choice == 0:
                                    break
        # Enclose the command with quotes to handle spaces in input
                                command = f"'{choice}'"
                                os.system(command)

        # Execute the command using the custom function to track executed commands
                                execute_command(command)
                # Add "open '" to the beginning and ".m3u' to the end of the command
        # Remove "zx" from the command

        # Add "open '" to the beginning and ".m3u' to the end of the cleaned command
                                command = f"open '{choice}.m3u'"
                                os.system(command)
                                print("Input written to history3333.m3u")
    
            with open("history3333.m3u", "a+") as file:
                choice = choice.strip()  # Remove leading/trailing spaces
                if len(choice) > 0 and choice != "s" and choice != "a":
                    if "qw" in choice:
                # Remove "qw" from the command before writing to history
                        clean_command2 = choice.replace("qw", "")
                        if clean_command2 not in existing_entries:
                            file.write(clean_command2 + "\n")
                            existing_entries.add(clean_command2)
                            if clean_command2 != "s" and clean_command2 != "a":
                                clean_command2 = f"'{choice}'"
                                os.system(clean_command2)


                    else:
                        if choice not in existing_entries:
                            file.write(choice + "\n")
                            existing_entries.add(choice)
                            print("Input written to history3333.m3u")
                else:
                    print("Invalid input. Please enter a valid choice.")

        if choice == "skip":
            vlc_next()
        elif choice == "s":
            vlc_next()
        elif choice == "next":
            vlc_next()
        elif choice == "last":
            vlc_previous()
        elif choice == "a":
            vlc_previous()
        elif choice == "back":
            vlc_previous()
        elif choice == "1v":
            change_volume(1)
        elif choice == "2v":
            change_volume(2)
        elif choice == "3v":
            change_volume(3)
        elif choice == "4v":
            change_volume(4)
        elif choice == "5v":
            change_volume(5)
        elif choice == "6v":
            change_volume(6)
        elif choice == "7v":
            change_volume(7)
        elif choice == "8v":
            change_volume(8)
        elif choice == "9v":
            change_volume(9)
        elif choice == "10v":
            change_volume(10)
        elif choice == "u":
            change_volume2()
        elif choice == "d":
            change_volume3()
        elif choice == "1":
                vlc_play()
        elif choice == "2":
                vlc_pause()
        elif choice == "3":
                vlc_next()
        elif choice == "4":
            vlc_previous()
        elif choice == "5":
            while True:
                try:
                    num_tracks = int(input("Enter the number of tracks to skip (negative number to go back): "))
                    if num_tracks == 0:
                        break
                    skip_tracks(num_tracks)
                except ValueError:
                    print("Invalid input. Please enter a valid number.")
        elif choice == "6":
            while True:
                command = input("Enter the command to run in the terminal (type '0' to stop): ")
                if command == "0":
                    break
                vlc_enqueue_playlist(command)
        elif choice == "7":
            create_custom_playlist()
        elif choice == "8":
            while True:
                try:
                    volume = float(input("Enter the volume (0.0 to 1.0): "))
                    change_volume(volume)
                    # Ask the user if they want to change the volume again
                    again = input("Do you want to change the volume again? (y/n): ")
                    if again.lower() != 'y':
                        break
                    
                except ValueError:
                    print("Invalid input. Please enter a valid number between 0.0 and 1.0.")
        # ... (existing code)
        elif choice == "9":
            while True:
                command = input("Enter the command to run in the terminal (type '0' to stop): ")
                if command == "0":
                    break
                # Execute the command using the custom function to track executed commands
                execute_command(command)
                # Add "open '" to the beginning and ".m3u' to the end of the command
                command = f"open '{command}.m3u'"
                os.system(command)
        # ... (existing code)
        elif choice == "10":
            input_file = "history.m3u"
            output_file = input("Enter the name of the output file (without extension): ")

            select_open_commands(input_file, output_file)
        elif choice == "11":
            playlist_name = input("Enter the playlist name: ")
            save_command_history_to_playlist(playlist_name)
        elif choice == "12":
            input_file = "history.m3u"
            output_file = input("Enter history3333: ")

            select_open_commands(input_file, output_file)

            while True:
                num_songs = input("Enter the number of random songs to play (type '0' to stop): ")
                if num_songs == "0":
                    break
                try:
                    history_playlist_path = os.path.join(os.path.expanduser("~"), "history3333.m3u")
                    random_song = select_random_song_from_history2(history_playlist_path)
                    if random_song:
                        print(f"Random song selected: {random_song}")
                        # Run the bash command "open '{random_song}.m3u'"
                        command = f"open '{random_song}.m3u'"
                        subprocess.run(command, shell=True)
                except ValueError:
                    print("Invalid input. Please enter a valid number.")
        elif choice == "13":
            game_question()
        elif choice == "14":
            game_question2()
        elif choice == "15":
            listening_game()
        try:
            subprocess.run(choice, shell=True, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error executing the command: {e}")
